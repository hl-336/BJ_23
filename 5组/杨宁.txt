day01作业
1、自动化测试类型有哪些？能解决一些什么样的问题？
答：
自动化测试类型：
    UI自动化测试：B/S架构的web端自动化测试、桌面应用自动化测试、移动端自动化测试；
    接口自动化测试；
    单元测试（代码自动化测试）。
 解决的问题：
    回归测试：对于之前历史版本功能的回归测试、对于修复的BUG的回归测试；
    压力测试：模拟很多用户并发去验证系统服务器是否能够满足需求；
    兼容性测试：
        PC端：操作系统、5大核心浏览器（IE、谷歌、火狐、欧鹏、safri）、分辨率、网络（数据网、wifi、数据网和WiFi切换）；
        移动端：操作系统、分辨率、版本兼容（小程序依托于微信客户端的版本、系统软件版本的兼容）、品牌/机型、
        网络（数据网、wifi、数据网和WiFi切换）。
---
2、某电商平台web系统基础版本耗时3个月已上线，现已进入产品版本迭代过程中，平均每周会发布一些新的功能以及少量历史优化类容。
在不考虑当前人力资源的情况下，该项目是否适合做web自动化测试并简单说明分析过程？
答：适合。
理由：
1.该电商web系统项目基础版本耗时3个月上线，由于后续还会进行产品版本迭代，所以属于公司不倒闭就会一直做下去的，周期长；
2.该电商web系统项目在后续并不是频繁变动需求，而是满足基本电商购物平台需求了，大的方向是不会变的，
只是发布新功能和优化历史内容而已；
3.由上述可知该项目后续会不断进行版本迭代，那么就需要做回归测试；
综上所述：该项目符合周期长、需求不频繁变动、需要做回归测试的要求，适合做web自动化测试。

---
3、元素定位练习题：
#注册流程
#1)打开TPSHOP商城进入注册页面，暂停3s；
#2)完成注册流程；
#3)元素定位方式不限； element.click()#点击事件
# 导包
import time

from selenium import webdriver

# 创建浏览器驱动对象
driver = webdriver.Chrome()
# 业务操作
# 1)打开TPSHOP商城进入注册页面，暂停3s;
driver.get("http://tpshop-test.itheima.net/Home/user/reg.html")
time.sleep(3)
# 2)完成注册流程；
# 3)元素定位方式不限；
# element.click()#点击事件
driver.find_element_by_id("username").send_keys("18103929315")
driver.find_element_by_name("verify_code").send_keys("8888")
driver.find_element_by_id("password").send_keys("123456")
driver.find_element_by_id("password2").send_keys("123456")
driver.find_element_by_name("invite").send_keys("13800138006")
# tpshop注册时协议默认勾选，测试了将协议勾选去掉也能注册成功，这是个缺陷
# driver.find_element_by_class_name("J_protocal").click()
driver.find_element_by_class_name("J_btn_agree").click()
# 停留3秒，然后关闭浏览器
time.sleep(3)
driver.quit()
---
# 登录练习：
# 1)打开TPSHOP商城进入登录界面
# 2)使用注册练习注册成功的用户信息登录TPSHOP
# 导包
import time

from selenium import webdriver

# 创建浏览器驱动对象
driver = webdriver.Chrome()
# 1)打开TPSHOP商城进入登录界面
driver.get("http://tpshop-test.itheima.net/Home/User/login.html")
# 业务流程
# 2)使用注册练习注册成功的用户信息登录TPSHOP
driver.find_element_by_id("username").send_keys("18103929315")
driver.find_element_by_name("password").send_keys("123456")
driver.find_element_by_id("verify_code").send_keys("8888")
driver.find_element_by_name("sbtbutton").click()
# 暂停3秒，关闭浏览器
time.sleep(3)
driver.quit()



day02作业
1.[多选]:针对标签定位下面说法正确的是:

    <body>
        <input type="text" class="inp fmobile J_cellphone" name="invite">
        <input class="inp fsecpass J_password2" id="password2" name="password2" >
    </body>

- A.使用driver.find_element_by_tag_name("input")可以定位第一个input元素；
- B.使用driver.find_element_by_xpath("//input")可以定位第一个input元素；
- C.不建议使用标签定位，因为一般情况下每个标签在页面中存在多个的可能性较大；
- D.页面上所有的元素都有标签名。
答：ABCD
---
2.[多选]:对于下面的元素，能成功定位a标签的表达式有哪些？

    <body>
        <div class="item-left">
    		<h3 class="cata-nav-name">
    			<div class="cata-nav-wrap">
    				<i class="ico ico-nav-1"></i>
    				<a href="/Home/Goods/goodsList/id/2.html" title="家用电器">家用电器</a>
    			</div>
    		</h3>
    	</div>
    </body>

- A.driver.find_element_by_link_text("家用电器")；
- B.driver.find_element_by_partial_link_text("电器")
- C.driver.find_element_by_tag_name("a")
- D.driver.find_element_by_xpath("//a")
- E.driver.find_element_by_xpath("//div/a")
- F.driver.find_element_by_xpath("//*[@title='家用电器']")
- G.driver.find_element_by_xpath("//*[text()='家用']")
答：ABCDEF
E：//div可以定位到两个div，//div/a是直接从第二个div定位到a
---
3.[多选]:对于xpath下面说法正确的是？

- A.xpath是一种标记语言，可以用于在html中进行元素查找；
- B.xpath可以使用标签内的任意元素来进行定位；
- C.xpath可以基本解决所有元素定位的问题；
- D.xpath定位方式将整个页面的所有元素进行扫描以定位我们所需要的元素，如果脚本中大量使用xpath做元素定位的话， 脚本的执行速度可能会稍慢。
答：ABCD
---
4.[多选]:定位下面<input>的元素，xpath路径定位策略表达式正确是？

    <body>
        <div id='testA'>
        	<input type="text" class="inp fmobile J_cellphone" name="invite" id="password">
        </div>
    </body>

- A.//body/div/input
- B.//input
- C./div//input
- D.//input[1]
答：ABD
---
5.[多选]:定位<a>标签待付款，对于xpath属性定位表达式正确的是：

    <div class="navitems2 p" id="navitems5">
        <ul>
            <li>
                <a href="order_list.html" value="全部订单" class="selected">全部订单</a>
            </li>
            <li>
                <a href="WAITPAY.html" value="待付款" class="">待付款</a>
            </li>
            <li>
                <a href="WAITSEND.html" value="待发货" class="">待发货</a>
            </li>
        <ul>
    </div>

- A.//a[@value='待付款']
- B.//*[@value='待付款']
- C.//a[@href='WAITPAY.html']
- D.//*[@value='待付款' and @href='WAITPAY.html']
答：ABCD
---
6.[多选]:定位<a>全部订单付款，对于xpath属性层级表达式正确的是：

    <div class="navitems2 p" id="navitems5">
        <ul class="tb1">
            <li id="table1">
                <a href="order_list.html" value="全部订单" class="selected">全部订单</a>
            </li>
        <ul>
    </div>

- A. //ul/li/a
- B.//li/a
- C.//li[@id='table1']/a
- D.//ul[@class='tb1']/a[1]
答：C
ABC都能定位到，但是属性和层级相结合的只有C
---
7.[多选]定位下面html中所有input标签，使用方法正确的是：

    <div>
        <div>
            <input id="username" name="username" value="all" class="usrA">请输入用户名</input>
        </div>
        </div id="demoA">
        	<input id="password" name="password" value="all" class="pwdA">请输入密码</input>
    	</div>
    	</div id="demoA">
        	<input id="phone" name="phone" value="all" class="phone">请输入电话号码</input>
    	</div>
    </div>

- A.driver.find_element_tag_name("input")
- B.driver.find_elements_by_tag_name("input")
- C.driver.find_elements_by_input("input")
- D.driver.find_elements_by_xpath("//input")
答：BD
---
1.如下html，class属性每次打开页面后面数字都会发生改变，如需要定位定位第三个input标签，下面表达式正确的是：

    <！-class标签每次都打开都会发生改变->
    <body>
        <input type="text" class="test001" name="invite">测试</input>
        <input type="text" class="test002" name="invite">测试</input>
        <input type="text" class="test003" name="invite">测试</input>
    	<input type="text" class="test004" name="invite">测试</input>
    </body>

- A.driver.find_elements(By.XPATH,"//*[contains(@class,'test')]")[2]
- B.driver.find_elements_by_tag_name("input")[2]
- C.driver.find_element(By.XPATH,"//*input[3]")
- D.driver.find_elements_by_xpath("//*[text()='测试']")[2]
答:BD
---
代码题
#打开浏览器后先窗口最大化
#1.使用xpath定位定位tpshop首页登陆超链接，并执行点击
#2.使用id定位定位登陆页面用户名输入框，输入用户名
#3.使用name定位定位登陆页面密码输入框，输入密码
#4.使用class定位定位登陆页面验证码输入框，输入验证码
#5.使用xpath定位登陆按钮执行点击
#6.打印登陆后页面标题和地址信息
---
(记得窗口最大化)
1.登录成功后(要做个强制等待,因为登录跳转比较慢)
2.循环打印下面图示相关信息，打印格式如下(要求使用遍历)：
	会员折扣  10 折
    可用积分  100 分
    账号余额  0.00 元
    优惠卷    0 张
3.在顶部搜索输入框输入搜索条件:小米,点击搜索
4.根据已学的类容获取到商品数量
答:
# 导包
import time

from selenium import webdriver

# 创建浏览器对象
driver = webdriver.Chrome()
# 打开浏览器后先窗口最大化
# driver.get("http://127.0.0.1/")  # 本地
driver.get("http://tpshop-test.itheima.net/")  # 在线
time.sleep(3)
driver.maximize_window()
# 1.使用xpath定位tpshop首页登陆超链接，并执行点击
driver.find_element_by_xpath("//a[text()='登录']").click()
# 2.使用id定位登陆页面用户名输入框，输入用户名
# driver.find_element_by_id("username").send_keys("17761976940")  # 本地
driver.find_element_by_id("username").send_keys("13800138006")  # 在线
# 3.使用name定位登陆页面密码输入框，输入密码
driver.find_element_by_name("password").send_keys("123456")
# 4.使用class定位登陆页面验证码输入框，输入验证码
driver.find_element_by_xpath("//div[@class='text_uspa check_cum']/input").send_keys("8888")
# 5.使用xpath定位登陆按钮执行点击
driver.find_element_by_xpath("//*[@onclick='checkSubmit();']").click()
# 6.打印登陆后页面标题和地址信息
print(driver.title)
print(driver.current_url)
# 1.登录成功后(要做个强制等待,因为登录跳转比较慢)
time.sleep(20)
# 2.循环打印下面图示相关信息，打印格式如下(要求使用遍历)：
# 	会员折扣  10 折
#     可用积分  100 分
#     账号余额  0.00 元
#     优惠卷    0 张
title_info = driver.find_elements_by_xpath("//div[@class='mu-afte fl']/ul/li/a/span")
data_info = driver.find_elements_by_xpath("//em[@class='mu-num']")
unit_info = driver.find_elements_by_xpath("//em[@class='mu-unit']")
for i in range(len(title_info)):
    print(title_info[i].text, data_info[i].text, unit_info[i].text)
# 3.在顶部搜索输入框输入搜索条件:小米,点击搜索
driver.find_element_by_xpath("//*[@class='search_usercenter_text']").send_keys("小米")
time.sleep(10)
driver.find_element_by_xpath("//*[text()='搜索']").click()
# 4.根据已学的类容获取到商品数量
# 7.等待20秒，关闭浏览器
time.sleep(20)
driver.quit()
---
黑马头条
答：
# 导包
import time

from selenium import webdriver
# 创建浏览器驱动对象
driver = webdriver.Chrome()
# 打开网址
driver.get("http://ttmp.research.itcast.cn/")
#打开浏览器后先窗口最大化
driver.maximize_window()
#2.使用包含定位登陆页面手机号输入框，输入手机号
driver.find_element_by_xpath("//*[contains(@placeholder,'请输入手机号')]").send_keys("13911111111")
time.sleep(3)
# 3.点击获取验证码
# driver.find_element_by_xpath("//span[text()='发送验证码']").click()
# time.sleep(3)
#4.使用开始定位登陆页面验证码输入框，输入验证码
driver.find_element_by_xpath("//*[starts-with(@placeholder,'验')]").send_keys("246810")
time.sleep(3)
# 4.点击登陆
driver.find_element_by_xpath("//button[@class='el-button el-button--primary']").click()
time.sleep(10)
driver.quit()
---
day03作业
day03作业
1.AB
2.AB
3.B
4.ABCD
5.BD
6.AD
7.A
---
简答题
# 1.如何实现输入悬停到下面所描述元素对象上？
# <div id='testA' name='testA'/>
答：
# 导包
import time

from selenium import webdriver
from selenium.webdriver import ActionChains
# 创建浏览器驱动对象
driver = webdriver.Chrome()
# 创建鼠标对象
action = ActionChains(driver)
# 悬停
action.move_to_element(driver.find_elements_by_xpath("//div[@id='testA' and @name='testA']")).perform()
# 暂停3秒后关闭浏览器
time.sleep(3)
driver.quit()
---
代码题目
# 导包
import time
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver import ActionChains

# 创建浏览器驱动对象
driver = webdriver.Chrome()
# 创建鼠标对象
action = ActionChains(driver)
# 1.打开tpshop,设置窗口最大化和隐式等待
driver.get("http://tpshop-test.itheima.net/")
driver.maximize_window()
driver.implicitly_wait(20)
# 2.登陆tpshop网站
driver.find_element_by_xpath("//a[text()='登录']").click()
driver.find_element_by_id("username").send_keys("13800138006")
driver.find_element_by_id("password").send_keys("123456")
driver.find_element_by_id("verify_code").send_keys("8888")
driver.find_element_by_css_selector("a[name='sbtbutton']").click()
# 3.在会员首页点击返回商城首页
driver.find_element_by_link_text("返回商城首页").click()
# 4.输入搜索条件小米
driver.find_element_by_id("q").send_keys("小米")
# 5.点击第一个搜索到商品接口对应加入购物车
driver.find_element_by_css_selector("button[class='ecsc-search-button']").click()
driver.find_element_by_xpath("//div[@class='p-btn']/a").click()
# 6.在商品详情页面点击加入购物车
driver.find_element_by_id("join_cart").click()
# 7.刷新界面
driver.refresh()
# 8.获取界面上购物车的商品总件数和总价,如下图。如购物车没有商品则打印图2中的元素文本信息
try:
    action.move_to_element(driver.find_element_by_xpath("//span[text()='我的购物车']")).perform()
    print("购物车的商品总件数：", driver.find_element_by_xpath("//p[@class='t-n fl']").text)
    print("购物车的商品总价格：", driver.find_element_by_xpath("//p[@class='t-p red fr']").text)
except NoSuchElementException:
    print(driver.find_element_by_xpath("//span[@class='ma']").text)
# 9.等待5s,点击去购物车结算
time.sleep(5)
driver.find_element_by_css_selector(".c-btn").click()
# 10.判断购物车页面商品勾选按钮是否选中
print("购物车页面商品勾选按钮已选中：", driver.find_element_by_name("checkItem").is_selected())
# 11.打印出商品单价、购买价、数量、小计金额
unit_price = driver.find_elements_by_xpath("//div[@id='tpshop-cart']/table/tbody/tr/td")[4].text
print("商品单价：", unit_price)
print("商品购买价：", driver.find_elements_by_xpath("//div[@id='tpshop-cart']/table/tbody/tr/td")[5].text)
print("商品数量：", driver.find_element_by_xpath("//div/input").get_attribute("value"))
print("商品小计金额：", driver.find_elements_by_xpath("//div[@id='tpshop-cart']/table/tbody/tr/td")[7].text)
# 12.写个判断:判断单价信息是否大于5000块
price = str.replace(unit_price,"￥","")
if int(float(price)) > 5000:
    # 	如大于则打印"黑店,不买了",并删除购物车的该商品,关闭浏览器
    print("黑店,不买了")
    driver.find_element_by_css_selector("#removeGoods").click()
# 	如小于,则打印"勉勉强强,用吧！不过暂时没钱"，关闭浏览器
else:
    print("勉勉强强,用吧！不过暂时没钱")
time.sleep(3)
driver.quit()
------------------------------------------------------
day05作业
# 目的:编写tpshop添加地址的测试用例
# 导包
import time
import pytest
from parameterized import parameterized
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.support.select import Select
from selenium.webdriver.support.wait import WebDriverWait


# 创建测试类
class TestLogin(object):
    def setup_class(self):
        # 创建浏览器驱动对象
        self.driver = webdriver.Chrome()
        # 打开首页
        self.driver.get("http://tpshop-test.itheima.net/")
        # 窗口最大化
        self.driver.maximize_window()
        # 隐式等待30秒
        self.driver.implicitly_wait(30)
        # 登录成功
        # self.driver.find_element_by_class_name("red").click()
        # self.driver.find_element_by_id("username").send_keys('13800138006')
        # self.driver.find_element_by_id("password").send_keys('123456')
        # self.driver.find_element_by_id("verify_code").send_keys('8888')
        # self.driver.find_element_by_class_name("J-login-submit").click()

    def teardown_class(self):
        # 关闭浏览器
        time.sleep(3)
        self.driver.quit()

    def setup(self):
        # 添加地址成功，在断言中会点击安全退出，页面会自动刷新为首页
        # 添加失败，则将当前页面关闭
        time.sleep(3)
        self.driver.get("http://tpshop-test.itheima.net/")

    # 参数化的数据
    test_login_data = [("12345678900", "123456", "8888", "账号不存在!", False),
                       ("13800138006", "error", "8888", "密码错误!", False),
                       ("13800138006", "123456", "8888", "安全退出", True)]

    # 参数化
    # 测试用例
    @pytest.mark.run(order=1)
    @parameterized.expand(test_login_data)
    def test_login(self, username, password, verify_code, expect, is_success):
        self.driver.find_element_by_class_name("red").click()
        self.driver.find_element_by_id("username").send_keys(username)
        self.driver.find_element_by_id("password").send_keys(password)
        self.driver.find_element_by_id("verify_code").send_keys(verify_code)
        self.driver.find_element_by_class_name("J-login-submit").click()
        # 断言
        # 正向用例
        if is_success:
            expect_response_success = "//a[text()='{}']".format(expect)
            element_success = WebDriverWait(self.driver, 10, 1).until(
                lambda x: x.find_element_by_xpath(expect_response_success))
            assert element_success
        # 反向用例
        else:
            element_fail = self.driver.find_element_by_xpath(
                "//div[@class='layui-layer-content layui-layer-padding']").text
            assert element_fail == expect

    # 添加地址的参数化数据
    test_add_address_data_list = [("王五02", "江苏省", "南京市", "浦口区", "沿江街道", "润泰花园01", "210008", "17761976940", True),
                                  ("王五03", "江苏省", "南京市", "浦口区", "沿江街道", "润泰花园02", "210008", "", False)]

    # 测试添加地址的用例
    # 1.重新打开首页，点击‘我的订单’进入后台管理页面
    # 参数化
    @pytest.mark.run(order=2)
    @parameterized.expand(test_add_address_data_list)
    def test_add_address(self, consignee, province, city, district, twon, address, zipcode, mobile, is_success):
        # 登录成功
        self.driver.find_element_by_class_name("red").click()
        self.driver.find_element_by_id("username").send_keys('13800138006')
        self.driver.find_element_by_id("password").send_keys('123456')
        self.driver.find_element_by_id("verify_code").send_keys('8888')
        self.driver.find_element_by_class_name("J-login-submit").click()
        # 点击我的订单,我的订单是一个新窗口
        time.sleep(3)
        self.driver.find_element_by_xpath("//a[text()='我的订单']").click()
        # 2.选择‘账户设置’下的‘收货地址’选项
        # 切换到最新窗口-我的订单
        handles = self.driver.window_handles
        self.driver.switch_to.window(handles[-1])
        # 创建鼠标对象
        action = ActionChains(self.driver)
        # 鼠标悬停在 ‘账户设置’
        action.move_to_element(self.driver.find_element_by_css_selector("div[class='u-dl']")).perform()
        # 点击‘收货地址’
        time.sleep(3)
        self.driver.find_element_by_xpath("//a[text()='收货地址']").click()
        # 3.点击地址管理下的‘增加新地址’按钮
        time.sleep(3)
        self.driver.find_element_by_xpath("//span[text()='增加新地址']").click()
        # 4.输入地址信息，利用参数化新增两条地址
        # 切换到frame
        self.driver.switch_to.frame(self.driver.find_element_by_xpath("//iframe[@scrolling='auto']"))
        time.sleep(3)
        # 填写收件人的名字
        self.driver.find_element_by_xpath("//input[@name='consignee']").send_keys(consignee)
        # 创建下拉框对象--省份
        select = Select(self.driver.find_element_by_id("province"))
        # 选择省份
        select.select_by_visible_text(province)
        # 创建下拉框对象--城市
        select = Select(self.driver.find_element_by_id("city"))
        # 选择城市
        select.select_by_visible_text(city)
        # 创建下拉框对象--区域
        select = Select(self.driver.find_element_by_id("district"))
        # 选择区域
        select.select_by_visible_text(district)
        # 创建下拉框对象--街道
        select = Select(self.driver.find_element_by_id("twon"))
        # 选择街道
        select.select_by_visible_text(twon)
        # 填写详细地址
        self.driver.find_element_by_id("address").send_keys(address)
        # 填写邮编
        self.driver.find_element_by_xpath("//input[@name='zipcode']").send_keys(zipcode)
        # 填写手机或固定电话
        self.driver.find_element_by_xpath("//input[@name='mobile']").send_keys(mobile)
        # 5.点击‘保存收货地址’按钮
        time.sleep(3)
        self.driver.find_element_by_xpath("//span[text()='保存收货地址']").click()

        # 断言
        time.sleep(2)
        if is_success:
            # 滚动条往下滑动200
            js_str = "window.scrollTo(0,200)"
            self.driver.execute_script(js_str)
            # 截图
            self.driver.get_screenshot_as_file("./img/add_success_{}.png".format(time.strftime("%Y%m%d%H%M%S")))
            # 打印已保存的地址数量
            saved_address_num = self.driver.find_element_by_xpath("//p[@class='gp_num2']/em").text
            print("已保存的地址数量：", saved_address_num)
            # 断言已保存的地址数量不超过20条
            assert saved_address_num
            # 添加成功了就点击安全退出
            WebDriverWait(self.driver, 10, 1).until(lambda x: x.find_element_by_xpath('//a[text()="安全退出"]')).click()
        else:
            # 添加失败会有弹出框
            alert = self.driver.switch_to.alert
            # 警告框点击确定
            alert.accept()
            # 截图
            self.driver.get_screenshot_as_file("./img/add_fail_{}.png".format(time.strftime("%Y%m%d%H%M%S")))
            # 打印警告框的提示信息
            print("警告框的提示信息：", alert.text)
            # # 警告框点击确定
            # alert.accept()
            # 关闭当前窗口
            time.sleep(3)
            self.driver.close()
-------------------------------------------------------------------------------------------
day06作业
将课堂的tpshop登录PO练习一遍
utils----
# 自定义工具类
from selenium import webdriver

# 定义浏览器驱动对象类
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.support.wait import WebDriverWait


class Driver(object):
    # 定义静态变量为None,防止出现创建多个浏览器对象的情况
    __driver = None

    # 定义创建浏览器驱动对象方法
    # 由于调用时不想实例化，只想只想使用类名调用，可以使用类方法
    @classmethod
    def create_driver(cls):
        # 如果__driver = None，那么久创建浏览器驱动对象，否则就直接返回当前浏览器驱动对象，不再又创建一个新的浏览器驱动对象
        if cls.__driver is None:
            # 创建浏览器驱动对象
            cls.__driver = webdriver.Chrome()
            # 窗口最大化
            cls.__driver.maximize_window()
            # 隐式等待30秒
            cls.__driver.implicitly_wait(30)
        # 注意：不管你有没有创建浏览器驱动对象，都要返回浏览器驱动对象，否则无法调用
        return cls.__driver

    # 定义关闭浏览器驱动对象方法
    # 由于调用时不想实例化，只想只想使用类名调用，可以使用类方法
    @classmethod
    def quit_driver(cls):
        # 只有当浏览器驱动对象存在时才能关闭
        if cls.__driver is not None:
            # 关闭浏览器驱动对象
            cls.__driver.quit()
            # 由于quit只能关闭浏览器驱动对象的界面，并不能删除私有属性__driver的原有值，所以需要给浏览器驱动对象强行赋值恢复为None
            cls.__driver = None


# -----------------------------------------------------------------------------------------------------------------------
# 自定义工具的第二种写法----> 可以不写在类中
# 定义获取警告信息的提示文本
def get_element_text(driver, xpath_str):
    # 由于定位元素对象不一定能找的到，所以这里用try...except
    try:
        # 找元素对象
        element = WebDriverWait(driver, 10, 1).until(lambda x: x.find_element_by_xpath(xpath_str))
        # 返回元素对象的文本信息
        return element.text
    except Exception as e:
        NoSuchElementException("can't find {} element".format(xpath_str))
------------------------------------------------------------------------------------------------------------------
login_page-------
# 封装登录页面
from lx_04.utils import Driver


# 对象层:找到登录页面中所有需要操作的元素对象
class LoginPageElement(object):
    # 初始化方法：创建浏览器驱动对象
    def __init__(self):
        self.driver = Driver.create_driver()

    # 由于以下的操作层需要调用对象层中的方法所找到的元素对象，所以一定要将找到的元素对象进行返回
    # 找用户名输入框
    def find_username(self):
        return self.driver.find_element_by_id("username")

    # 找密码输入框
    def find_password(self):
        return self.driver.find_element_by_id("password")

    # 找验证码输入框
    def find_verify_code(self):
        return self.driver.find_element_by_id("verify_code")

    # 找登录按钮
    def find_login_button(self):
        return self.driver.find_element_by_name("sbtbutton")


# 操作层
class LoginOperation(object):
    # 初始化方法：实例化对象层，需要对象层中封装的元素对象
    def __init__(self):
        self.login_page_element = LoginPageElement()

    # 向用户名输入框中输入用户名的方法
    def input_username(self, username):
        self.login_page_element.find_username().send_keys(username)

    # 向密码输入框中输入密码的方法
    def input_password(self, password):
        self.login_page_element.find_password().send_keys(password)

    # 向验证码输入框中输入验证码的方法
    def input_verify_code(self, verify_code):
        self.login_page_element.find_verify_code().send_keys(verify_code)

    # 点击登录按钮的方法
    def click_login_button(self):
        self.login_page_element.find_login_button().click()


# 业务层
class LoginBusiness(object):
    # 初始化方法：实例化操作层
    def __init__(self):
        self.login_operation = LoginOperation()

    # 定义登录方法
    def login(self, username, password, verify_code):
        # 输入用户名
        self.login_operation.input_username(username)
        # 输入密码
        self.login_operation.input_password(password)
        # 输入验证码
        self.login_operation.input_verify_code(verify_code)
        # 点击登录按钮
        self.login_operation.click_login_button()
------------------------------------------------------------------------------------------------------
test_login----------------------
# 引入单元测试框架
# 导包
import time
from lx_04.utils import Driver, get_element_text
from lx_04.login_page import LoginBusiness


# 定义测试登录类
class TestLogin(object):
    # 执行测试用例时从一开始只要做一次的操作
    def setup_class(self):
        # 创建浏览器驱动对象
        self.driver = Driver.create_driver()
        # 实例化登录业务类
        self.login_business = LoginBusiness()

    # 执行测试用例结束后只要做一次的操作
    def teardown_class(self):
        # 关闭浏览器驱动对象
        Driver.quit_driver()

    # 在每次执行用例前都要保证每个用例在同样的位置开始进行的测试
    def setup(self):
        # 打开tpshop首页
        self.driver.get("http://tpshop-test.itheima.net/")

    # 定义测试登录账号不存在方法
    def test_login_username_not_exist(self):
        # 4.执行业务操作
        # 点击登录按钮
        self.driver.find_element_by_css_selector(".red").click()
        # 登录业务
        self.login_business.login("13800138123", "123456", "8888")
        # 获取警告提示信息
        time.sleep(3)
        msg = get_element_text(self.driver, "//div[@class='layui-layer-content layui-layer-padding']")
        print("警告信息：", msg)
        # 断言
        assert "账号不存在!" == msg

    # 定义测试登录密码错误方法
    def test_password_error(self):
        # 4.执行业务操作
        # 点击登录按钮
        self.driver.find_element_by_css_selector(".red").click()
        # 输入用户名
        self.login_business.login("13800138006", "error", "8888")
        # 获取警告提示信息
        time.sleep(3)
        msg = get_element_text(self.driver, "//div[@class='layui-layer-content layui-layer-padding']")
        print("警告信息：", msg)
        # 断言
        assert "密码错误!" == msg




