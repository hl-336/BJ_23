Day01
1、自动化测试类型有哪些？能解决一些什么样的问题？
答：UI自动化测试、接口自动化测试、单元测试
   解决问题：
   解决回归测试（对于历史版本功能的验证、对于缺陷修复之后的验证）
   解决压力测试（模拟多个用户去验证系统服务器是否能满足要求的过程）
   解决兼容性测试（对于PC端浏览器、系统、分辨率的兼容、对于手机端系统、分辨率和品牌的测试、对于软件版本的兼容测试）

2、某电商平台web系统基础版本耗时3个月已上线，现已进入产品版本迭代过程中，平均每周会发布一些新的功能以及少量历史优化类容。在不考虑当前人力资源
的情况下，该项目是否适合做web自动化测试并简单说明分析过程？
答：不适合，理由有以下几点：
  （1）、该项目平均每周更新一些新的功能，需求变动太频繁，会导致脚本没有办法重复运行
  （2）、该项目的周期时间不长，只有三个月

3.代码：
import time

from selenium import webdriver

driver = webdriver.Chrome()
driver.get("http://tpshop-test.itheima.net/")
time.sleep(3)
driver.find_element_by_link_text("注册").click()
time.sleep(3)
driver.find_element_by_id("username").send_keys("13818852988")
time.sleep(3)
driver.find_element_by_name("verify_code").send_keys("8888")
time.sleep(3)
driver.find_element_by_name("password").send_keys("66666666")
time.sleep(3)
driver.find_element_by_name("password2").send_keys("66666666")
time.sleep(3)
driver.find_element_by_name("invite").send_keys("13726733266")
time.sleep(3)
driver.find_element_by_class_name("regbtn.J_btn_agree").click()
time.sleep(8)
driver.quit()

4.代码：
import time

from selenium import webdriver

driver = webdriver.Chrome()
driver.get("http://tpshop-test.itheima.net/")
time.sleep(3)
driver.find_element_by_class_name("red").click()
time.sleep(3)
driver.find_element_by_id("username").send_keys("13818852988")
time.sleep(3)
driver.find_element_by_name("password").send_keys("66666666")
time.sleep(3)
driver.find_element_by_id("verify_code").send_keys("8888")
time.sleep(3)
driver.find_element_by_name("sbtbutton").click()
time.sleep(3)
driver.quit()

Day02:
一、基础题
1.ABCD
2.ABCDEF
3.BC
4.ABD
5.ABCD
6.ABC
7.BD

代码题：
1.
import time
from selenium import webdriver

driver = webdriver.Chrome()
driver.get("http://ttmp.research.itcast.cn/")
driver.find_element_by_xpath("//*[@placeholder='请输入手机号']").send_keys("13911111111")
time.sleep(3)
driver.find_element_by_xpath('//*[@placeholder="验证码"]').send_keys("246810")
time.sleep(3)
driver.find_element_by_xpath("//*[@class='el-button el-button--primary']").click()
time.sleep(3)
print("获取的页面标题为：", driver.title)
print("获取当前页面的url为：", driver.current_url)
driver.quit()

二、提高题
1.B

Day03作业
一、基础题
选择题
1.ABC
2.ABC
3.B
4.ABCD
5.ABC
6.AD
7.AD
简答题
import time
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By

driver = webdriver.Chrome()
# 1.打开tpshop,设置窗口最大化和隐式等待
driver.get("http://tpshop-test.itheima.net/")
driver.maximize_window()
driver.implicitly_wait(10)
# 2.登陆tpshop网站
driver.find_element_by_class_name("red").click()
driver.find_element_by_id("username").send_keys("13800000001")
driver.find_element_by_name("password").send_keys("123456")
driver.find_element_by_id("verify_code").send_keys("8888")
driver.find_element_by_name("sbtbutton").click()
time.sleep(3)
# 3.在会员首页点击返回商城首页
driver.find_element_by_class_name("home").click()
time.sleep(2)
# 4.输入搜索条件小米
driver.find_element_by_id("q").send_keys("小米")
driver.find_element_by_class_name("ecsc-search-button").click()
# 5.点击第一个搜索到商品接口对应加入购物车
driver.find_element_by_class_name("lazy-list").click()
# 6.在商品详情页面点击加入购物车
driver.find_element_by_id("join_cart").click()
# 7.刷新界面id
driver.refresh()
# 8.获取界面上购物车的商品总件数和总价,如下图。如购物车没有商品则打印图2中的元素文本信息
cart = driver.find_element_by_id("cart_quantity")
try:
    action = ActionChains(driver)
    action.move_to_element(cart)
    action.perform()
    print("购物车商品总件数：", driver.find_element_by_css_selector("#total_qty").text)
    print("购物车商品总价：", driver.find_element_by_css_selector("#total_pay").text)
except:
    print("购物车为空")
# 9.等待5s,点击去购物车结算
time.sleep(5)
driver.find_element_by_class_name("c-btn").click()
# 10.判断购物车页面商品勾选按钮是否选中
driver.find_element_by_name("checkItem").is_selected()
# 11.打印出商品单价、购买价、数量、小计金额
print("商品单价：", driver.find_element_by_xpath("//*[contains(@id,'goods_price')]").text)
print("购买价：", driver.find_element_by_xpath("//*[contains(@id,'member_goods_price')]").text)
print("数量：", driver.find_element_by_xpath("//*[contains(@id,'changeQuantity')]").text)
print("小计金额：", driver.find_element_by_xpath("//*[contains(@id,'market_price')]").text)
# 12.写个判断:判断单价信息是否大于5000块 如大于则打印"黑店,不买了",并删除购物车的该商品,关闭浏览器 如小于,则打印"勉勉强强,用吧！不过暂时没钱"，关闭浏览器
price_mi = driver.find_element_by_xpath("//*[contains(@id,'goods_price')]").text
single_price = ''.join(filter(str.isdigit, price_mi))
single_price=int(single_price)
if single_price > 5000:
    print("黑店，不买了")
    driver.find_element_by_id("removeGoods").click()
else:
    print("勉勉强强，用吧！不过暂时没钱")
driver.quit()
