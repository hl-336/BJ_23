-----------------------
红红掌握的很不错咯,很多元素定位都能灵活运用了,加油！！！！！
-----------------------



DAY01
1、自动化测试类型有哪些？能解决一些什么样的问题？
 答：UI自动化测试，接口自动化测试，单元测试
    回归测试：对于历史版本功能的验证；对于缺陷修复后的验证
    压力测试：模拟多个用户验证系统服务器是否能满足要求的过程
    兼容性测试：PC端（浏览器简荣芳，系统兼容，分辨率）
             手机端（系统：安卓，ISO，鸿蒙、分辨率、品牌、软件版本兼容：小程序依托于微信客户端的版本，系统软件的版本兼容）
2、某电商平台web系统基础版本耗时3个月已上线，现已进入产品版本迭代过程中，平均每周会发布一些新的功能以及少量历史优化类容。
   在不考虑当前人力资源的情况下，该项目是否适合做web自动化测试并简单说明分析过程？
 答：因为这个web项目周期比较长，产品版本会迭代，并且每周都会发布新功能，只有少量优化，所以在版本迭代的过程中可以使用web自动化进行回归测试
3、元素定位练习题：#注册流程
               #1)打开TPSHOP商城进入注册页面，暂停3s；
               #2)完成注册流程；
               #3)元素定位方式不限；
               element.click()#点击事件
--------------------------------------------
# 导包
import time
from selenium import webdriver
# 创建浏览器对象
driver = webdriver.Chrome()
# 输入TPSHOP商城网址
driver.get("http://tpshop-test.itheima.net/")
# 业务操作
driver.find_element_by_link_text("注册").click()
driver.find_element_by_id("username").send_keys("17710624694")
driver.find_element_by_name("verify_code").send_keys("8888")
driver.find_element_by_id("password").send_keys("123456")
driver.find_element_by_id("password2").send_keys("123456")
driver.find_element_by_link_text("同意协议并注册").click()
# 暂停3秒
time.sleep(3)
# 关闭浏览器
driver.quit()
---------------------------------
#登录练习：
#1)打开TPSHOP商城进入登录界面
#2)使用注册练习注册成功的用户信息登录TPSHOP
--------------------------------------
# 导包
import time
from selenium import webdriver

# 创建浏览器对象
driver = webdriver.Chrome()
# 输入TPSHOP商城网址
driver.get("http://tpshop-test.itheima.net/")
# 业务操作
driver.find_element_by_class_name("red").click()
driver.find_element_by_id("username").send_keys("17710624694")
driver.find_element_by_id("password").send_keys("123456")
driver.find_element_by_id("verify_code").send_keys("8888")
driver.find_element_by_name("sbtbutton").click()
# 暂停3秒
time.sleep(3)
# 关闭浏览器
driver.quit()
------------------------------------------
*************************************************************************
DAY02
1.BCD
2.ABCDEF
3.ABCD
4.ABD
5.ABCD
6.ABC
7.BD
8.代码题
# 导包
import time
from selenium import webdriver

# 创建浏览器驱动对象
driver = webdriver.Chrome()
# 打开tpshop网址
driver.get("http://localhost")
# 业务操作
# 1）窗口最大化
driver.maximize_window()
# 2)使用xpath定位定位tpshop首页登陆超链接，并执行点击
driver.find_element_by_xpath('//*[@class="red"]').click()
# 3)使用id定位定位登陆页面用户名输入框，输入用户名
driver.find_element_by_id("username").send_keys("18514057508")
# 4)使用name定位定位登陆页面密码输入框，输入密码
driver.find_element_by_name("password").send_keys("777777")
# 5)使用class定位定位登陆页面验证码输入框，输入验证码
driver.find_elements_by_class_name("text_cmu")[2].send_keys("8888")
# 6)使用xpath定位登陆按钮执行点击
driver.find_element_by_xpath("//*[@name='sbtbutton']").click()
time.sleep(3)
# 7)打印登陆后页面标题和地址信息
print("登录标题", driver.title)
print("地址信息", driver.current_url)
# 在顶部搜索输入框输入搜索条件:小米,点击搜索
driver.find_element_by_name("q").send_keys("小米")
driver.find_element_by_xpath("//form/a").click()
# 暂停3秒
time.sleep(5)
# 关闭浏览
driver.quit()
****************************************************************************
DAY03
一、基础题
选择题
1.ABC        C选项错误,获取元素信息并不是为了获取元素的
2.ABCD       √
3.B          √
4.ACD        √
5.BD         AC选项没有问题,课上讲过呀
6.ABC        选反咯D
7.ABCD       只有A是错误选项哈,答案是BCD

二、简答题
1.如何实现输入悬停到下面所描述元素对象上？
<div id='testA' name='testA'/>

    # 导包
    # 创建浏览器对象
    打开浏览器
    # 创建鼠标对象
    action.move_to_element(driver.find_element_by_id("testA"))

二、代码题
# 导包
import time

from selenium import webdriver
# 创建浏览器驱动对象
from selenium.webdriver import ActionChains

driver = webdriver.Chrome()
# 创建鼠标对象
action = ActionChains(driver)
# 1.打开tpshop,设置窗口最大化和隐式等待
driver.get("http://tpshop-test.itheima.net/")
# 窗口最大化
driver.maximize_window()
# 隐式等待10秒
driver.implicitly_wait(10)
# 2.登陆tpshop网站
driver.find_element_by_css_selector('.red').click()
driver.find_element_by_id("username").send_keys("13800138006")
driver.find_element_by_id("password").send_keys("123456")
driver.find_element_by_id("verify_code").send_keys("8888")
driver.find_element_by_name("sbtbutton").click()
# 3.在会员首页点击返回商城首页
driver.find_element_by_css_selector('.home').click()
# 4.输入搜索条件小米
driver.find_element_by_id('q').send_keys('小米')
driver.find_element_by_class_name('ecsc-search-button').click()
# 5.点击第一个搜索到商品接口对应加入购物车
driver.find_element_by_css_selector('[onclick$="4).val());"]').click()
# 6.在商品详情页面点击加入购物车
driver.find_element_by_css_selector('.shop_name2 a').click()
driver.find_element_by_id('join_cart').click()
time.sleep(3)
# # 7.刷新界面
driver.find_element_by_class_name("layui-layer-ico").click()
# 8.获取界面上购物车的商品总件数和总价,如下图。如购物车没有商品则打印图2中的元素文本信息

try:
    action.move_to_element(driver.find_element_by_xpath('//*[@id="hd-my-cart"]/a/div'))
    action.perform()
    print("商品总件数：", driver.find_element_by_css_selector(".c-t p").text)
    print("商品总价：", driver.find_element_by_id("total_pay").text)
except Exception as e:
    print("购物车没有商品：", driver.find_element_by_class_name("ma").text)
# 9.等待5s,点击去购物车结算
time.sleep(5)
driver.find_element_by_css_selector(".c-n span").click()
# 10.判断购物车页面商品勾选按钮是否选中
print("是否勾选：", driver.find_element_by_name("checkItem").is_selected())
# 11.打印出商品单价、购买价、数量、小计金额
price = driver.find_element_by_css_selector('[id$="goods_price"]').text
print("商品单价：", price)
print("商品购买价：", driver.find_element_by_css_selector('[id$="member_goods_price"]').text)
print("数量：", driver.find_element_by_css_selector('[id*="changeQuantity_"]').get_attribute("value"))
print("小计金额：", driver.find_element_by_css_selector('[id*="market_price"]').text)
# 12.写个判断:判断单价信息是否大于5000块
print('价格为', price[1:5])

if int(price[1:5]) > 5000:
    print('黑店，不买了')
    driver.find_element_by_class_name('deleteGoods')
    driver.quit()
# # 如大于则打印"黑店,不买了",并删除购物车的该商品,关闭浏览器
else:
    print('勉勉强强，用吧！不过暂时没钱')
    driver.quit()
# 如小于,则打印"勉勉强强,用吧！不过暂时没钱"，关闭浏览器


