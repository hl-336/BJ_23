-------------------------
前面两天的作业都做的很好呀，咋DAY03的作业不见了~~~~~~~~！！
-------------------------
day01
--------------------------------------
1、自动化测试类型有哪些？能解决一些什么样的问题？
1.1自动化测试类型：UI自动化测试（web端自动化测试，移动端自动化测试），接口测试，单元测试
1.2、a.回归测试：版本功能的验证；
     b.压力测试：模拟多个用户验证服务器性能能否满足要求；
     c.兼容性测试：1）、PC端：主要是操作系统、浏览器以及分辨率；2）、移动端：分辨率、系统（安卓，ios），软件版本；
     d.提供测试效率，提高产品质量；
2、某电商平台web系统基础版本耗时3个月已上线，现已进入产品版本迭代过程中，平均每周会发布一些新的功能以及少量历史优化类容。
在不考虑当前人力资源的情况下，该项目是否适合做web自动化测试并简单说明分析过程？
答：该项目不适合做web自动化测试，原因如下：
    a、项目周期较短，小于6个月；b、需求更新过快
3、元素定位练习题：

"""
1)打开TPSHOP商城进入注册页面，暂停3s；
2)完成注册流程
"""

# 导包
import time
from selenium import webdriver
# 创建浏览器驱动对象
driver = webdriver.Chrome()
# 打开浏览器,输入网址
driver.get("http://tpshop-test.itheima.net/Home/user/reg.html")
# 业务操作
# 输入手机号码
driver.find_element_by_class_name("J_cellphone").send_keys("13844649478")
# 图像验证码
driver.find_element_by_class_name("J_imgcode").send_keys("8888")
# 设置密码
driver.find_element_by_class_name("J_password").send_keys("123456")
# 确认密码
driver.find_element_by_class_name("fsecpass").send_keys("123456")
time.sleep(3)
# 点击按钮
element = driver.find_element_by_class_name("J_btn_agree")
element.click()
time.sleep(3)
# 关闭浏览器
driver.quit()

"""
2)使用注册练习注册成功的用户信息登录TPSHOP
"""
# 导包
import time

from selenium import webdriver
# 创建浏览器驱动对象
driver = webdriver.Chrome()
# 输入网址
driver.get("http://tpshop-test.itheima.net/Home/user/login.html")
# 操作业务
# 输入手机号
driver.find_element_by_id("username").send_keys("18593739748")
# 输入密码
driver.find_element_by_name("password").send_keys("123456")
# 输入验证码
driver.find_element_by_id("verify_code").send_keys("8888")
driver.find_element_by_class_name("J-login-submit").click()
time.sleep(3)
# 关闭浏览器
driver.quit()
------------------------------------------------------------------------------------------
day02
------------------------------------------------------------------------------------------
一、
1.ABC
2.ABCDEFG
3.ACD
4.ABCD
5.ABCD
6.ABC
7.BCD
2.代码题
# 导包
import time
from selenium import webdriver
driver = webdriver.Chrome() # 创建浏览器驱动对象
driver.get("http://tpshop-test.itheima.net/Home/user/login.html") # 打开网址
# 操作业务
driver.maximize_window() # 打开浏览器后先窗口最大化
driver.find_element_by_id("username").send_keys("13844649477")
# 3.使用name定位定位登陆页面密码输入框，输入密码
driver.find_element_by_name("password").send_keys("123456")
# 4.使用class定位定位登陆页面验证码输入框，输入验证码
driver.find_element_by_xpath('//*[@class="text_cmu" and @id="verify_code"]').send_keys("8888")
# 5.使用xpath定位登陆按钮执行点击
driver.find_element_by_xpath('//*[@class="J-login-submit"]').click()
# 6.打印登陆后页面标题和地址信息
print("打印页面标题", driver.title)
print("地址信息", driver.current_url)
time.sleep(5)
# 关闭
driver.quit()
-----------------------------------------------------------------------------------
day03
-----------------------------------------------------------------------------------
一、
选择题：
# 一、基础题
# 1.AB
# 2.ABCD
# 3.B
# 4.ACD
# 5.ABCD
# 6.D
# 7.A
简答题:
action.move_to_element(driver.find_element_by_tag_id("testA"))
# 导包
import time
from selenium import webdriver
from selenium.webdriver import ActionChains
# 创建浏览器驱动对象
driver = webdriver.Chrome()
action = ActionChains(driver)
# 打开网址
driver.get("http://localhost/index.php/Home/User/index.html")
# 1.打开tpshop,设置窗口最大化和隐式等待
driver.maximize_window()
driver.implicitly_wait(10)
# 2.登陆tpshop网站
driver.find_element_by_id("username").send_keys("13844649477")
driver.find_element_by_id('password').send_keys("123456")
driver.find_element_by_id('verify_code').send_keys("8888")
driver.find_element_by_name("sbtbutton").click()
# 3.在会员首页点击返回商城首页
driver.find_element_by_xpath('//div[@class="m-navitems"]/ul/li/a').click()
# 4.输入搜索条件小米
driver.find_element_by_id('q').send_keys("小米")
driver.find_element_by_class_name("ecsc-search-button").click()
# 5.点击第一个搜索到商品接口对应加入购物车
driver.find_element_by_link_text("加入购物车").click()
# 6.在商品详情页面点击加入购物车
driver.find_element_by_id("join_cart").click()
# 7.刷新界面
driver.refresh()
# 8.获取界面上购物车的商品总件数和总价,如下图。如购物车没有商品则打印图2中的元素文本信息try
try:
    # 悬停
    action.move_to_element(driver.find_element_by_css_selector(".c-n"))
    action.perform()
    time.sleep(3)
    # 获取
    print("获取商品数量", driver.find_element_by_id('total_qty').text)
    print("获取价格", driver.find_element_by_id('total_pay').text)
except:
    print("亲，购物车中没有商品呦~")
# 9.等待5s,点击去购物车结算
time.sleep(5)
driver.find_element_by_css_selector(".c-btn").click()
# 10.判断购物车页面商品勾选按钮是否选中
print("判断按钮是否勾选：True", driver.find_element_by_css_selector(".check-box").is_selected())
# 11.打印出商品单价、购买价、数量、小计金额
-----------------------------------------------------------------------
# print("商品单价:", driver.find_element_by_id("cart_15_goods_price").text)
# print("购买价:", driver.find_element_by_id("cart_15_member_goods_price").text)
# print("数量:", driver.find_element_by_css_selector("[id*='changeQuantity']").get_attribute("value"))
# print("小计金额:", driver.find_element_by_id("cart_15_market_price").text)
------------------------------------------------------------------------
修改：
print(driver.find_element_by_css_selector(".item-single span").text)
unit_price = driver.find_elements_by_css_selector("[align='center']")[11].text
print(unit_price)
print(driver.find_elements_by_css_selector("[align='center']")[12].text)
print(driver.find_element_by_css_selector("[id*='changeQuantity']").get_attribute("value"))
------------------------------------------------------------------------------
# 12.写个判断:判断单价信息是否大于5000块
# 	如大于则打印"黑店,不买了",并删除购物车的该商品,关闭浏览器
# 	如小于,则打印"勉勉强强,用吧！不过暂时没钱"，关闭浏览器
-------------------------------------------------------------------------------
修改：
# money = driver.find_element_by_id("cart_15_member_goods_price").text
# if money > str(5000):
---------------------------------------------------------------------------------
if round(float(unit_price.split("￥")[1])) > 5000:
    print("黑店,不买了")
    driver.find_element_by_css_selector('[class="gwc-gb deleteGoods"]').click()
    driver.quit()
else:
    print("勉勉强强,用吧！不过暂时没钱")
    driver.quit()
----------------------------------------------------------------------------------
day05
----------------------------------------------------------------------------------

[pytest]
# 命令行参数
addopts = -s --html=report/report.html --reruns 2
# 文件路径
testpaths = ./test_tpshop/
# 文件名称
python_files = test_02.py
# 类名称
python_classes = Test*
# 方法名称
python_functions = test_*

# 导包
import time
import pytest
from parameterized import parameterized
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.support.select import Select


# 创建测试类
class TestLogin:
    """测试类"""
    def setup_class(self):
        self.driver = webdriver.Chrome()
        self.driver.get("http://tpshop-test.itheima.net/")
        self.driver.maximize_window()
        self.driver.implicitly_wait(30)
    def teardown_class(self):
        time.sleep(3)
        self.driver.quit()
    date_login = [("13844649477", "13844649477", "8888")]
    data_select = [("小余", "甘肃省", "白银市", "会宁县", "会宁镇", "会宁县第一中学", "13844649477"),
                   ("小余", "甘肃省", "白银市", "会宁县", "会宁镇", "会宁县第二中学", "13844649487")]

    @parameterized.expand(date_login)
    def test_01_login(self, username, password, verify_code):
        # 点击‘登录’跳转到登录页面
        self.driver.find_element_by_class_name("red").click()
        # 输入用户名、密码和万能验证码，点击登录按钮登录系统
        self.driver.find_element_by_id("username").send_keys(username)
        self.driver.find_element_by_id("password").send_keys(password)
        self.driver.find_element_by_id("verify_code").send_keys(verify_code)
        self.driver.find_element_by_name("sbtbutton").click()

    @parameterized.expand(data_select)
    def test_02_add(self, name, province, city, district, twon, address, mobile):
        # 点击我的订单
        self.driver.find_element_by_xpath('//*[text()="我的订单"]').click()
        # 页面切换
        handles = self.driver.window_handles
        self.driver.switch_to.window(handles[1])
        # 2. 选择‘账户设置’下的‘收货地址’选项
        action = ActionChains(self.driver)
        action.move_to_element(self.driver.find_element_by_xpath('//*[text()="账户设置"]'))
        time.sleep(3)
        action.perform()
        self.driver.find_element_by_xpath('//*[text()="收货地址"]').click()
        # 3. 点击地址管理下的‘增加新地址’按钮
        self.driver.find_element_by_class_name("co_blue").click()
        # 4. 输入地址信息，利用参数化新增两条地址
        # frame切换
        self.driver.switch_to.frame(self.driver.find_element_by_id("layui-layer-iframe100001"))
        # 收货人
        self.driver.find_element_by_css_selector('[class="wi80-BFB"][name="consignee"]').send_keys(name)
        # 定位省份
        select = Select(self.driver.find_element_by_id("province"))
        select.select_by_visible_text(province)
        # 定位市
        select = Select(self.driver.find_element_by_id("city"))
        select.select_by_visible_text(city)
        # 定位县
        select = Select(self.driver.find_element_by_id("district"))
        select.select_by_visible_text(district)
        # 定位乡镇
        select = Select(self.driver.find_element_by_id("twon"))
        select.select_by_visible_text(twon)
        # 添加详细地址
        self.driver.find_element_by_xpath('//*[@id="address"]').send_keys(address)
        # 添加手机号
        self.driver.find_element_by_name('mobile').send_keys(mobile)
        # 5. 点击‘保存收货地址’按钮
        self.driver.find_element_by_css_selector('[class="box-ok ma-le--70"]').click()
        # 新增完之后下拉滚动条200像素, 并且获取已保存多少地址
        js_str = "window,scrollTo(0,200)"
        self.driver.execute_script(js_str)